---
name: Deploy Go App to ECS

on:
  push:
    branches:
      - main

env:
  AWS_REGION: ap-southeast-1
  ECS_CLUSTER: dev-paimon-bank-shafa

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: dev

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@62f4f872db3836360b72999f4b87f1ff13310f3a

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
          BEC_NAME: paimon-bank-shafa
        run: |
          echo "${{ secrets.DB_SSL_PEM }}" | base64 -d > file.pem
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build \
            --build-arg PEM_FILE=file.pem \
            --build-arg "DB_HOST=${{ secrets.DB_HOST }}" \
            --build-arg "DB_NAME=${{ secrets.DB_NAME }}" \
            --build-arg "DB_USERNAME=${{ secrets.DB_USERNAME }}" \
            --build-arg "DB_PARAMS=${{ secrets.DB_PARAMS }}" \
            --build-arg "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" \
            --build-arg "DB_PORT=${{ secrets.DB_PORT }}" \
            --build-arg "DB_USERNAME=${{ secrets.DB_USERNAME }}" \
            --build-arg "JWT_SECRET=${{ secrets.JWT_SECRET }}" \
            --build-arg "S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }}" \
            --build-arg "S3_ID=${{ secrets.S3_ID }}" \
            --build-arg "S3_REGION=${{ secrets.S3_REGION }}" \
            --build-arg "S3_SECRET_KEY=${{ secrets.S3_SECRET_KEY }}" \
            --build-arg "BCRYPT_SALT=${{ secrets.BCRYPT_SALT }}" \
            -t $ECR/$BEC_NAME:$IMAGE_TAG --file ./dockerfile/backend/Dockerfile .
          docker push $ECR/$BEC_NAME:$IMAGE_TAG
          echo "image=$ECR/$BEC_NAME:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Build and push Prometheus Docker image
        id: build-image-prometheus
        env:
          ECR: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
          PROMETHEUS_CONTAINER_NAME: paimon-bank-shafa-prometheus
        run: |
          docker build \
            -t $ECR/$PROMETHEUS_CONTAINER_NAME:$IMAGE_TAG --file ./dockerfile/prometheus/Dockerfile .
          docker push $ECR/$PROMETHEUS_CONTAINER_NAME:$IMAGE_TAG
          echo "image=$ECR/$PROMETHEUS_CONTAINER_NAME:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Build and push Grafana Docker image
        id: build-image-grafana
        env:
          ECR: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
          GRAFANA_CONTAINER_NAME: paimon-bank-shafa-grafana
        run: |
          docker build \
            -t $ECR/$GRAFANA_CONTAINER_NAME:$IMAGE_TAG --file ./dockerfile/grafana/Dockerfile .
          docker push $ECR/$GRAFANA_CONTAINER_NAME:$IMAGE_TAG
          echo "image=$ECR/$GRAFANA_CONTAINER_NAME:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Update ECS Task Definitions
        env:
          ECR: ${{ steps.login-ecr.outputs.registry }}
          PROMETHEUS: ${{ steps.login-ecr.outputs.registry }}\/paimon-bank-shafa-prometheus:${{ github.sha }}
          GRAFANA: ${{ steps.login-ecr.outputs.registry }}\/paimon-bank-shafa-grafana:${{ github.sha }}
          BACKEND: ${{ steps.login-ecr.outputs.registry }}\/paimon-bank-shafa:${{ github.sha }}
        run: |
          sed -i "s/$ECR\/paimon-bank-shafa:latest/$BACKEND/g" .github/workflows/backend.json
          sed -i "s/$ECR\/paimon-bank-shafa-prometheus:latest/$PROMETHEUS/g" .github/workflows/prometheus.json
          sed -i "s/$ECR\/paimon-bank-shafa-grafana:latest/$GRAFANA/g" .github/workflows/grafana.json

          aws ecs register-task-definition --cli-input-json file://.github/workflows/backend.json
          aws ecs register-task-definition --cli-input-json file://.github/workflows/prometheus.json
          aws ecs register-task-definition --cli-input-json file://.github/workflows/grafana.json

      - name: Update ECS services
        run: |
          LATEST_TASK_BE=$(aws ecs describe-task-definition --task-definition paimon-bank-shafa-backend-dev --query 'taskDefinition.taskDefinitionArn' --output text)
          LATEST_TASK_PROME=$(aws ecs describe-task-definition --task-definition paimon-bank-shafa-prometheus-dev --query 'taskDefinition.taskDefinitionArn' --output text)
          LATEST_TASK_GRAFANA=$(aws ecs describe-task-definition --task-definition paimon-bank-shafa-grafana-dev --query 'taskDefinition.taskDefinitionArn' --output text)

          aws ecs update-service --cluster $ECS_CLUSTER --service backend --force-new-deployment --task-definition $LATEST_TASK_BE
          aws ecs update-service --cluster $ECS_CLUSTER --service prometheus --force-new-deployment --task-definition $LATEST_TASK_PROME
          aws ecs update-service --cluster $ECS_CLUSTER --service grafana --force-new-deployment --task-definition $LATEST_TASK_GRAFANA